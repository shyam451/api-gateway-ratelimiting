name: API Gateway Rate Limiting Tests

on:
  push:
    branches: [ main, devin/* ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          cdk/package-lock.json
          lambda/package-lock.json
    
    - name: Install CDK dependencies
      run: |
        cd cdk
        npm ci
        npm install -g aws-cdk
    
    - name: Install Lambda dependencies
      run: |
        cd lambda
        npm ci
    
    - name: Build CDK project
      run: |
        cd cdk
        npm run build
    
    - name: Synthesize CloudFormation template
      run: |
        cd cdk
        npm run synth
        # Save the template for direct deployment
        mkdir -p cdk.out
        cp cdk.out/ApiGatewayRateLimitingStack.template.json cdk.out/template.json
    
    - name: Run CDK tests
      run: |
        cd cdk
        npm test
      continue-on-error: true
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/devin/'))
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy API Gateway and Lambda using AWS CLI directly
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/devin/'))
      run: |
        # Create Lambda function role
        LAMBDA_ROLE_ARN=$(aws iam get-role --role-name ec2-role --query "Role.Arn" --output text || echo "arn:aws:iam::641002720432:role/ec2-role")
        echo "Using Lambda role: $LAMBDA_ROLE_ARN"
        
        # Create Lambda function
        cd lambda
        zip -r function.zip index.js
        
        # Check if Lambda function exists
        LAMBDA_EXISTS=$(aws lambda list-functions --query "Functions[?FunctionName=='ApiGatewayRateLimitingLambda'].FunctionName" --output text || echo "")
        
        if [ -z "$LAMBDA_EXISTS" ]; then
          echo "Creating Lambda function..."
          aws lambda create-function \
            --function-name ApiGatewayRateLimitingLambda \
            --runtime nodejs18.x \
            --handler index.handler \
            --role $LAMBDA_ROLE_ARN \
            --zip-file fileb://function.zip
        else
          echo "Updating Lambda function..."
          aws lambda update-function-code \
            --function-name ApiGatewayRateLimitingLambda \
            --zip-file fileb://function.zip
        fi
        
        # Get Lambda function ARN
        LAMBDA_ARN=$(aws lambda get-function --function-name ApiGatewayRateLimitingLambda --query "Configuration.FunctionArn" --output text)
        echo "Lambda ARN: $LAMBDA_ARN"
        
        # Create API Gateway
        API_EXISTS=$(aws apigateway get-rest-apis --query "items[?name=='Rate Limited API'].id" --output text || echo "")
        
        if [ -z "$API_EXISTS" ]; then
          echo "Creating API Gateway..."
          API_ID=$(aws apigateway create-rest-api \
            --name "Rate Limited API" \
            --description "API Gateway with rate limiting enabled" \
            --endpoint-configuration "{ \"types\": [\"REGIONAL\"] }" \
            --query "id" --output text)
        else
          echo "API Gateway already exists."
          API_ID=$API_EXISTS
        fi
        
        echo "API Gateway ID: $API_ID"
        
        # Get root resource ID
        ROOT_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/'].id" --output text)
        echo "Root resource ID: $ROOT_ID"
        
        # Create test resource
        TEST_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_ID --query "items[?path=='/test'].id" --output text || echo "")
        
        if [ -z "$TEST_RESOURCE_ID" ]; then
          echo "Creating test resource..."
          TEST_RESOURCE_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part "test" \
            --query "id" --output text)
        fi
        
        echo "Test resource ID: $TEST_RESOURCE_ID"
        
        # Create GET method
        aws apigateway put-method \
          --rest-api-id $API_ID \
          --resource-id $TEST_RESOURCE_ID \
          --http-method GET \
          --authorization-type NONE || echo "Method already exists"
        
        # Create Lambda integration
        aws apigateway put-integration \
          --rest-api-id $API_ID \
          --resource-id $TEST_RESOURCE_ID \
          --http-method GET \
          --type AWS_PROXY \
          --integration-http-method POST \
          --uri "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations" || echo "Integration already exists"
        
        # Create method response
        aws apigateway put-method-response \
          --rest-api-id $API_ID \
          --resource-id $TEST_RESOURCE_ID \
          --http-method GET \
          --status-code 200 \
          --response-models '{"application/json": "Empty"}' || echo "Method response already exists"
        
        # Create integration response
        aws apigateway put-integration-response \
          --rest-api-id $API_ID \
          --resource-id $TEST_RESOURCE_ID \
          --http-method GET \
          --status-code 200 \
          --response-templates '{"application/json": ""}' || echo "Integration response already exists"
        
        # Add Lambda permission
        aws lambda add-permission \
          --function-name ApiGatewayRateLimitingLambda \
          --statement-id apigateway-test \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:us-east-1:641002720432:$API_ID/*/GET/test" || echo "Lambda permission already exists"
        
        # Create deployment
        DEPLOYMENT_ID=$(aws apigateway create-deployment \
          --rest-api-id $API_ID \
          --stage-name prod \
          --query "id" --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        
        # Set up rate limiting
        aws apigateway update-stage \
          --rest-api-id $API_ID \
          --stage-name prod \
          --patch-operations \
            "op=replace,path=/*/*/throttling/rateLimit,value=100" \
            "op=replace,path=/*/*/throttling/burstLimit,value=200"
        
        # Set API URL for testing
        echo "API_URL=https://$API_ID.execute-api.us-east-1.amazonaws.com/prod/test" >> $GITHUB_ENV
        echo "API URL: https://$API_ID.execute-api.us-east-1.amazonaws.com/prod/test"
    
    - name: Run rate limit tests
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/devin/'))
      run: |
        echo "Using API URL: ${{ env.API_URL }}"
        node test/rate-limit-test.js ${{ env.API_URL }}
